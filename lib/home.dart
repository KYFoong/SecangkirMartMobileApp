import 'package:flutter/material.dart';
import 'cart.dart';
import 'feedback.dart';
import 'orderPage.dart';
import 'product.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'profile.dart';
// Generated by `flutterfire configure`
import 'product_detail.dart'; // Import the ProductDetailScreen


class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      home: Home(),
    );
  }
}

class Home extends StatefulWidget {
  const Home({super.key});

  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<Home> {
  int _currentIndex = 0;

  final List<Widget> _pages = [
    const HomePageContent(),
    const Product(),
    const CompletedOrdersPage(),
    const FeedbackForm(),
    const ProfilePage(),
  ];

  final List<String> _titles = [
    'Secangkir Mart',
    'Products',
    'Orders',
    'Feedback',
    'Profile',
  ];

  // This will be used to update the current page based on the bottom navigation selection
  void _onItemTapped(int index) {
    setState(() {
      _currentIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: Image.asset(
          'lib/assets/logo.png',
          height: 30,
          width: 30,
        ),
        title: Text(
          _titles[_currentIndex],
          style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
        ),
        backgroundColor: const Color(0xFFC59D54),
        actions: [
          IconButton(
            icon: const Icon(Icons.shopping_cart),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => const ShoppingCart(),
                ),
              );
            },
            color: Colors.white,
          ),
        ],
      ),
      // This is the part where the content changes dynamically
      body: IndexedStack(
        index: _currentIndex,
        children: _pages,
      ),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _currentIndex,
        selectedItemColor: const Color(0xFFC59D54),
        unselectedItemColor: Colors.black,
        showUnselectedLabels: true,
        showSelectedLabels: true,
        items: const [
          BottomNavigationBarItem(
            label: 'Home',
            icon: Icon(Icons.home),
          ),
          BottomNavigationBarItem(
            label: 'Products',
            icon: Icon(Icons.shopping_bag),
          ),
          BottomNavigationBarItem(
            label: 'Orders',
            icon: Icon(Icons.history),
          ),
          BottomNavigationBarItem(
            label: 'Feedback',
            icon: Icon(Icons.feedback),
          ),
          BottomNavigationBarItem(
            label: 'Profile',
            icon: Icon(Icons.person),
          ),
        ],
        onTap: _onItemTapped,
      ),
    );
  }
}

class HomePageContent extends StatelessWidget {
  const HomePageContent({super.key});

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      child: Center(
        child: Column(
          children: [
            Image.asset('lib/assets/cover.png'),
            const SizedBox(height: 20),
            const Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                SizedBox(width: 20),
                Text(
                  'Popular Products',
                  style: TextStyle(
                    fontSize: 30,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 20),
            // Fetch and display popular products
            _buildProductSection(context, 'PopularProduct'),
            const SizedBox(height: 20),
            const Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                SizedBox(width: 20),
                Text(
                  'New Products',
                  style: TextStyle(
                    fontSize: 30,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 20),
            // Fetch and display new products
            _buildProductSection(context, 'NewProduct'),
          ],
        ),
      ),
    );
  }

  // Helper method to build product sections for a specific categoryId (PopularProduct or NewProduct)
  Widget _buildProductSection(BuildContext context, String categoryId) {
    return StreamBuilder<QuerySnapshot>(
      stream: FirebaseFirestore.instance
          .collection('Category')
          .where('categoryId', isEqualTo: categoryId) // Filter by categoryId
          .snapshots(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        }

        if (snapshot.hasError) {
          return Center(child: Text('Error: ${snapshot.error}'));
        }

        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
          return const Center(child: Text('No products available'));
        }

        // Extract the product documents from the snapshot
        final categories = snapshot.data!.docs;

        return SingleChildScrollView(
          scrollDirection: Axis.horizontal,
          child: Row(
            children: categories.map((categoryDoc) {
              // Convert the document into a ProductModel
              final product = ProductModel.fromFirestore(categoryDoc);

              return GestureDetector(
                onTap: () {
                  // Navigate to the Product Detail Screen
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => ProductDetailScreen(productId: product.id),
                    ),
                  );
                },
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 10.0),
                  child: SizedBox(
                    width: 150,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        // Display the product image
                        Image.network(product.image, width: 150, height: 150),
                        const SizedBox(height: 10),
                        // Display the product name
                        SizedBox(
                          width: 150,
                          child: Text(
                            product.name,
                            style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                            textAlign: TextAlign.center,
                            overflow: TextOverflow.ellipsis,
                            maxLines: 1,
                          ),
                        ),
                        // Display the product category
                        SizedBox(
                          width: 150,
                          child: Text(
                            product.cat,
                            style: const TextStyle(fontSize: 14),
                            textAlign: TextAlign.center,
                            overflow: TextOverflow.ellipsis,
                            maxLines: 1,
                          ),
                        ),
                        // Display the product price
                        SizedBox(
                          width: 150,
                          child: Text(
                            "RM ${product.price.toStringAsFixed(2)}",
                            style: const TextStyle(fontSize: 14),
                            textAlign: TextAlign.center,
                            overflow: TextOverflow.ellipsis,
                            maxLines: 1,
                          ),
                        ),
                        // Display the product status
                        SizedBox(
                          width: 150,
                          child: Text(
                            product.status ?? 'No status available',
                            style: (product.status == 'In Stock')
                            ? const TextStyle(fontSize: 14)
                            : const TextStyle(fontSize: 14, color: Colors.red),
                            textAlign: TextAlign.center,
                            overflow: TextOverflow.ellipsis,
                            maxLines: 1,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              );
            }).toList(),
          ),
        );
      },
    );
  }
}

class ProductModel {
  final String id;
  final String name;
  final String cat;
  final num price;
  final String image;
  final String? status;

  ProductModel({
    required this.id,
    required this.name,
    required this.cat,
    required this.price,
    required this.image,
    this.status,
  });

  factory ProductModel.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>;

    return ProductModel(
      id: doc.id,  // Firestore document ID
      name: data['name'] ?? '',
      cat: data['cat'] ?? '',
      price: data['price'] ?? 0.00,
      image: data['image'] ?? '',
      status: data['status'],
    );
  }
}

